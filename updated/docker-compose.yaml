version: '3.8'

services:
  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: datacenter_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db_setup.sql:/docker-entrypoint-initdb.d/01-setup.sql:ro
      - ./mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro
    networks:
      - datacenter_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 10s
      retries: 10
      interval: 30s

  # Datacenter Monitoring Application
  datacenter_app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: datacenter_monitoring
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      # Database Configuration
      - MYSQL_HOST=mysql
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_PORT=${MYSQL_PORT}
      - DB_POOL_SIZE=${DB_POOL_SIZE}
      
      # AI Model Configuration
      - DETECTION_MODEL_PATH=${DETECTION_MODEL_PATH}
      - PPE_DETECTION_MODEL_PATH=${PPE_DETECTION_MODEL_PATH}
      - POSE_ESTIMATION_MODEL_PATH=${POSE_ESTIMATION_MODEL_PATH}
      - POSE_ENABLED=${POSE_ENABLED}
      
      # Camera Configuration
      - NUMBER_OF_CAMERAS=${NUMBER_OF_CAMERAS}
      - BATCH_SIZE=${BATCH_SIZE}
      - READER_FPS_LIMIT=${READER_FPS_LIMIT}
      - MAX_PARALLEL_CAMERAS=${MAX_PARALLEL_CAMERAS}
      
      # Activity Levels
      - ACTIVITY_LEVEL_HIGH=${ACTIVITY_LEVEL_HIGH}
      - ACTIVITY_LEVEL_MEDIUM=${ACTIVITY_LEVEL_MEDIUM}
      - ACTIVITY_LEVEL_LOW=${ACTIVITY_LEVEL_LOW}
      - FPS_ACTIVITY_LEVEL=${FPS_ACTIVITY_LEVEL}
      
      # Detection Parameters
      - PPE_DETECTION_ENABLED=${PPE_DETECTION_ENABLED}
      - PPE_CONFIDENCE_THRESHOLD=${PPE_CONFIDENCE_THRESHOLD}
      - PERSON_DETECTION_CONFIDENCE=${PERSON_DETECTION_CONFIDENCE}
      - GENERAL_DETECTION_CONFIDENCE=${GENERAL_DETECTION_CONFIDENCE}
      
      # Use Case Thresholds
      - TAILGATING_TIME_WINDOW=${TAILGATING_TIME_WINDOW}
      - LOITERING_THRESHOLD=${LOITERING_THRESHOLD}
      - INTRUSION_SENSITIVITY=${INTRUSION_SENSITIVITY}
      - INTRUSION_CONFIDENCE_THRESHOLD=${INTRUSION_CONFIDENCE_THRESHOLD}
      
      # Motion Detection
      - MOTION_DETECTION_ENABLED=${MOTION_DETECTION_ENABLED}
      - MOTION_THRESHOLD=${MOTION_THRESHOLD}
      - MOTION_AREA_THRESHOLD=${MOTION_AREA_THRESHOLD}
      - MOTION_IDLE_TIMEOUT=${MOTION_IDLE_TIMEOUT}
      - MOTION_WARMUP_FRAMES=${MOTION_WARMUP_FRAMES}
      
      # Camera Tamper Detection
      - TAMPER_DETECTION_ENABLED=${TAMPER_DETECTION_ENABLED}
      - FRAME_DIFF_THRESHOLD=${FRAME_DIFF_THRESHOLD}
      - OBSTRUCTION_THRESHOLD=${OBSTRUCTION_THRESHOLD}
      - TAMPER_CHECK_INTERVAL=${TAMPER_CHECK_INTERVAL}
      
      # Media Storage Configuration
      - MEDIA_PREFERENCE=${MEDIA_PREFERENCE}
      - EVENT_COOLDOWN=${EVENT_COOLDOWN}
      - AUTO_RECORDING_ENABLED=${AUTO_RECORDING_ENABLED}
      
      # Video Recording Configuration
      - VIDEO_BUFFER_SIZE=${VIDEO_BUFFER_SIZE}
      - VIDEO_BUFFER_PAST_SECONDS=${VIDEO_BUFFER_PAST_SECONDS}
      - VIDEO_BUFFER_FUTURE_SECONDS=${VIDEO_BUFFER_FUTURE_SECONDS}
      - VIDEO_FPS=${VIDEO_FPS}
      - PRE_EVENT_SECONDS=${PRE_EVENT_SECONDS}
      - POST_EVENT_SECONDS=${POST_EVENT_SECONDS}
      - VIDEO_EXTENSION=${VIDEO_EXTENSION}
      - VIDEO_CODEC=${VIDEO_CODEC}
      - VIDEO_RESOLUTION=${VIDEO_RESOLUTION}
      
      # Cloud Storage (Optional)
      - GCP_PROJECT=${GCP_PROJECT}
      - GCP_BUCKET_NAME=${GCP_BUCKET_NAME}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
      
      # System Configuration
      - LOG_LEVEL=${LOG_LEVEL}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - DB_WRITER_BATCH_SIZE=${DB_WRITER_BATCH_SIZE}
      
    volumes:
      # Models directory
      - ./models:/app/models:ro
      # Logs directory
      - ./logs:/app/logs
      # Frames storage
      - ./frames:/app/frames
      # Videos storage  
      - ./videos:/app/videos
      # Configuration files
      - ./configs:/app/configs:ro
      # GCP Service Account Key (if using GCP)
      - ./gcp-service-account.json:/app/gcp-service-account.json:ro
    ports:
      - "8000:8000"  # For future API/dashboard
    networks:
      - datacenter_network
    # GPU support
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "python3", "-c", "import sys; sys.exit(0)"]
      timeout: 30s
      retries: 3
      interval: 60s

  # Redis (Optional - for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: datacenter_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - datacenter_network
    command: redis-server --appendonly yes

  # Nginx (Optional - for load balancing and reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: datacenter_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - datacenter_app
    networks:
      - datacenter_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  datacenter_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16